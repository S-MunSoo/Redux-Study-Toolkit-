{"ast":null,"code":"// redux 로직\n// redux 여러개의 상태 데이터 관리하기\n// npm install @reduxjs/toolkit 리덕스 툴킷 시작\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\"; // toolkit 상태관리\n\nlet initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  // createSlice 객체를 인자로 생성한다\n  name: \"counter\",\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      //action이 필요한 이유는 amount라는 payload 값이 발생했기 때문에\n      state.counter = state.counter + action.payload;\n    },\n\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n}); // 일반 redux action 상태관리\n// const counterReducer = (state = initialState, action) => {\n//   if (action.type === \"increment\") {\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.amount,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"toggle\") {\n//     return {\n//       showCounter: !state.showCounter,\n//       counter: state.counter,\n//     };\n//   }\n//   return { ...state };\n// };\n// configureStore 여러개의 리듀서 상태 관리를 위해 툴킷에서 재공하는 configureStore를 통해 store를 관리한다\n\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer\n  }\n}); // 키값으로 구성되어 있는 action을 내보낸다\n// export const { increment, decrement, increase, toggleCounter } =\n//   counterSlice.action;\n\nexport const counterActions = counterSlice.actions;\nexport default store;\nconst initialAuthState = {\n  isAuthenticated: false\n};\ncreateSlice({\n  name: \"authentication\",\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n\n  }\n});","map":{"version":3,"names":["createSlice","configureStore","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","toggleCounter","store","reducer","counterActions","actions","initialAuthState","isAuthenticated","login","logout"],"sources":["/Users/shinmunsu/Desktop/01-starting-project-redux/src/store/store.js"],"sourcesContent":["// redux 로직\n// redux 여러개의 상태 데이터 관리하기\n// npm install @reduxjs/toolkit 리덕스 툴킷 시작\n\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\n\n// toolkit 상태관리\nlet initialCounterState = {\n  counter: 0,\n  showCounter: true,\n};\n\nconst counterSlice = createSlice({\n  // createSlice 객체를 인자로 생성한다\n  name: \"counter\",\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      //action이 필요한 이유는 amount라는 payload 값이 발생했기 때문에\n      state.counter = state.counter + action.payload;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    },\n  },\n});\n\n// 일반 redux action 상태관리\n// const counterReducer = (state = initialState, action) => {\n//   if (action.type === \"increment\") {\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.amount,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"toggle\") {\n//     return {\n//       showCounter: !state.showCounter,\n//       counter: state.counter,\n//     };\n//   }\n//   return { ...state };\n// };\n\n// configureStore 여러개의 리듀서 상태 관리를 위해 툴킷에서 재공하는 configureStore를 통해 store를 관리한다\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n  },\n});\n\n// 키값으로 구성되어 있는 action을 내보낸다\n// export const { increment, decrement, increase, toggleCounter } =\n//   counterSlice.action;\nexport const counterActions = counterSlice.actions;\n\nexport default store;\n\nconst initialAuthState = {\n  isAuthenticated: false,\n};\n\ncreateSlice({\n  name: \"authentication\",\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n    },\n  },\n});\n"],"mappings":"AAAA;AACA;AACA;AAEA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C,C,CAEA;;AACA,IAAIC,mBAAmB,GAAG;EACxBC,OAAO,EAAE,CADe;EAExBC,WAAW,EAAE;AAFW,CAA1B;AAKA,MAAMC,YAAY,GAAGL,WAAW,CAAC;EAC/B;EACAM,IAAI,EAAE,SAFyB;EAG/BC,YAAY,EAAEL,mBAHiB;EAI/BM,QAAQ,EAAE;IACRC,SAAS,CAACC,KAAD,EAAQ;MACfA,KAAK,CAACP,OAAN;IACD,CAHO;;IAIRQ,SAAS,CAACD,KAAD,EAAQ;MACfA,KAAK,CAACP,OAAN;IACD,CANO;;IAORS,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAgB;MACtB;MACAH,KAAK,CAACP,OAAN,GAAgBO,KAAK,CAACP,OAAN,GAAgBU,MAAM,CAACC,OAAvC;IACD,CAVO;;IAWRC,aAAa,CAACL,KAAD,EAAQ;MACnBA,KAAK,CAACN,WAAN,GAAoB,CAACM,KAAK,CAACN,WAA3B;IACD;;EAbO;AAJqB,CAAD,CAAhC,C,CAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,MAAMY,KAAK,GAAGf,cAAc,CAAC;EAC3BgB,OAAO,EAAE;IACPd,OAAO,EAAEE,YAAY,CAACY;EADf;AADkB,CAAD,CAA5B,C,CAMA;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAGb,YAAY,CAACc,OAApC;AAEP,eAAeH,KAAf;AAEA,MAAMI,gBAAgB,GAAG;EACvBC,eAAe,EAAE;AADM,CAAzB;AAIArB,WAAW,CAAC;EACVM,IAAI,EAAE,gBADI;EAEVC,YAAY,EAAEa,gBAFJ;EAGVZ,QAAQ,EAAE;IACRc,KAAK,CAACZ,KAAD,EAAQ;MACXA,KAAK,CAACW,eAAN,GAAwB,IAAxB;IACD,CAHO;;IAIRE,MAAM,CAACb,KAAD,EAAQ;MACZA,KAAK,CAACW,eAAN,GAAwB,KAAxB;IACD;;EANO;AAHA,CAAD,CAAX"},"metadata":{},"sourceType":"module"}